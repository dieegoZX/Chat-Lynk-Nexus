<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Chat Premium Gold</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <style>
    :root {
      /* Paleta de Cores */
      --color-gold: #daa520; /* Goldenrod - um dourado clássico */
      --color-dark-bg: #1a202c; /* Azul/Cinza muito escuro */
      --color-container-bg: #2d3748; /* Azul/Cinza escuro */
      --color-message-bot-bg: #4a5568; /* Cinza médio-escuro */
      --color-message-user-bg: #718096; /* Cinza médio */
      --color-text-light: #e2e8f0; /* Cinza muito claro / Quase branco */
      --color-text-medium: #a0aec0; /* Cinza claro */
      --color-text-dark: var(--color-dark-bg);
      --color-white: #ffffff;
      --font-primary: 'Inter', sans-serif;
    }

    body {
      font-family: var(--font-primary);
      background-color: var(--color-dark-bg);
      color: var(--color-text-light); /* Cor de texto padrão para o corpo */
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh; /* Garante altura mínima */
      padding: 1rem; /* Espaçamento nas bordas em telas menores */
      box-sizing: border-box;
    }

    .chat-container {
      background-color: var(--color-container-bg);
      width: 100%; /* Ocupa mais espaço em telas pequenas */
      max-width: 450px; /* Largura máxima aumentada um pouco */
      height: 85vh; /* Altura um pouco menor para margem */
      max-height: 700px; /* Altura máxima */
      display: flex;
      flex-direction: column;
      border-radius: 12px; /* Bordas um pouco mais suaves */
      overflow: hidden;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3); /* Sombra mais pronunciada */
      border: 1px solid var(--color-message-bot-bg); /* Borda sutil */
    }

    .chat-header {
      background-color: var(--color-gold);
      color: var(--color-white);
      padding: 1rem 1.25rem; /* Mais padding */
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid rgba(0, 0, 0, 0.1); /* Linha sutil abaixo */
    }

    .chat-avatar {
      background-color: var(--color-white);
      color: var(--color-gold);
      border-radius: 50%;
      width: 40px; /* Tamanho fixo */
      height: 40px;
      display: inline-flex; /* Para alinhar ícone */
      align-items: center;
      justify-content: center;
      margin-right: 0.75rem;
      font-size: 1.2rem; /* Tamanho do ícone */
      flex-shrink: 0; /* Não encolher */
    }

    .chat-title {
      display: flex;
      align-items: center;
      font-weight: 600;
      font-size: 1.1rem;
    }

    .chat-actions {
      display: flex;
      gap: 0.75rem; /* Espaçamento entre ícones */
    }

    .chat-action-btn {
      background: transparent;
      border: none;
      color: var(--color-white);
      font-size: 1.3rem; /* Ícones maiores */
      cursor: pointer;
      transition: opacity 0.2s ease;
    }
    .chat-action-btn:hover {
      opacity: 0.8;
    }

    .chat-messages {
      flex: 1;
      padding: 1.25rem;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
      gap: 0.75rem; /* Espaço entre mensagens */
      background-color: var(--color-container-bg); /* Garante fundo */
    }
    /* Estilização da barra de rolagem (Webkit) */
    .chat-messages::-webkit-scrollbar {
        width: 8px;
    }
    .chat-messages::-webkit-scrollbar-track {
        background: var(--color-container-bg);
        border-radius: 10px;
    }
    .chat-messages::-webkit-scrollbar-thumb {
        background-color: var(--color-message-bot-bg);
        border-radius: 10px;
        border: 2px solid var(--color-container-bg); /* Espaço em volta */
    }
    .chat-messages::-webkit-scrollbar-thumb:hover {
        background-color: var(--color-message-user-bg);
    }


    .message {
      max-width: 85%; /* Mensagens podem ser um pouco mais largas */
      word-wrap: break-word;
      padding: 0.8rem 1rem; /* Padding interno */
      border-radius: 18px; /* Bordas mais arredondadas */
      line-height: 1.5; /* Espaçamento entre linhas */
      position: relative; /* Para o tempo absoluto se necessário */
    }

    .user-message {
      align-self: flex-end;
      background: linear-gradient(to bottom right, var(--color-message-user-bg), #5f6e81); /* Gradiente sutil */
      color: var(--color-text-light);
      border-bottom-right-radius: 6px; /* Canto mais agudo */
      margin-left: auto;
    }

    .bot-message, .welcome-message {
      align-self: flex-start;
      background: linear-gradient(to bottom right, var(--color-message-bot-bg), #3a4556); /* Gradiente sutil */
      color: var(--color-text-light);
      border-bottom-left-radius: 6px; /* Canto mais agudo */
      margin-right: auto;
    }

    .message p {
        margin: 0 0 0.25rem 0; /* Pequeno espaço abaixo do texto antes do tempo */
    }
    .message p:last-child {
        margin-bottom: 0; /* Remove margem do último parágrafo se houver */
    }

    .message-time {
      font-size: 0.7rem; /* Tempo menor */
      color: var(--color-text-medium);
      display: block; /* Garante que fique abaixo */
      margin-top: 0.3rem;
      text-align: right;
      opacity: 0.8; /* Tempo um pouco mais sutil */
    }
    .bot-message .message-time, .welcome-message .message-time {
        text-align: left;
    }

    .typing-indicator {
      padding: 0.5rem 1.25rem; /* Alinha com padding das mensagens */
      display: flex;
      align-items: center;
      gap: 0.3rem;
      align-self: flex-start;
      height: 30px; /* Altura fixa para evitar pulos */
    }

    .typing-dot {
      width: 8px;
      height: 8px;
      background: var(--color-text-medium);
      border-radius: 50%;
      animation: blink 1.2s infinite ease-in-out alternate;
    }
    .typing-dot:nth-child(2) { animation-delay: 0.2s; }
    .typing-dot:nth-child(3) { animation-delay: 0.4s; }

    .typing-text {
      font-size: 0.8rem;
      color: var(--color-text-medium);
      margin-left: 0.5rem;
    }

    @keyframes blink {
      0% { opacity: 0.2; transform: scale(0.8); }
      100% { opacity: 1; transform: scale(1); }
    }

    .hidden {
      /* Usa opacidade e altura para transição suave (se desejado) */
      opacity: 0;
      height: 0;
      padding: 0 1.25rem; /* Mantém padding horizontal para evitar colapso abrupto */
      overflow: hidden;
      transition: opacity 0.3s ease, height 0.3s ease, padding 0.3s ease;
    }
    /* Ajusta a classe .typing-indicator quando não está oculta */
     .typing-indicator:not(.hidden) {
        height: 30px; /* Altura restaurada */
        opacity: 1;
         padding: 0.5rem 1.25rem;
     }


    .welcome-message {
        /* Estilos já aplicados junto com .bot-message */
        margin-bottom: 1rem; /* Espaço extra abaixo */
    }

    .welcome-title {
      font-weight: 600;
      margin-bottom: 0.25rem;
      color: var(--color-gold); /* Título da boas-vindas em dourado */
      font-size: 1.05em;
    }
    .welcome-text {
        margin-bottom: 0.75rem;
        font-size: 0.95em;
        color: var(--color-text-light);
    }

    .quick-replies {
      margin-top: 1rem;
      display: flex;
      gap: 0.6rem; /* Espaçamento entre botões */
      flex-wrap: wrap;
      justify-content: flex-start; /* Alinha à esquerda */
    }

    .quick-reply {
      background-color: rgba(255, 255, 255, 0.1); /* Fundo semi-transparente */
      padding: 0.5rem 1rem; /* Padding */
      border-radius: 20px; /* Bordas arredondadas */
      font-size: 0.85rem;
      color: var(--color-text-light);
      cursor: pointer;
      border: 1px solid var(--color-message-user-bg); /* Borda sutil */
      transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;
    }
    .quick-reply:hover {
      background-color: var(--color-gold);
      border-color: var(--color-gold);
      color: var(--color-text-dark); /* Texto escuro no hover dourado */
    }

    .chat-input-container {
      display: flex;
      padding: 1rem 1.25rem;
      border-top: 1px solid var(--color-message-bot-bg); /* Linha divisória */
      background-color: var(--color-container-bg); /* Garante fundo */
      gap: 0.75rem; /* Espaço entre input e botão */
    }

    .message-input {
      flex: 1;
      border: 1px solid var(--color-message-user-bg);
      border-radius: 20px; /* Input arredondado */
      padding: 0.75rem 1.25rem; /* Padding interno */
      outline: none;
      background-color: var(--color-message-bot-bg); /* Fundo do input */
      color: var(--color-text-light); /* Cor do texto digitado */
      font-size: 0.95rem;
      transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }
    .message-input::placeholder {
      color: var(--color-text-medium);
      opacity: 0.8;
    }
    .message-input:focus {
      border-color: var(--color-gold);
      box-shadow: 0 0 0 3px rgba(218, 165, 32, 0.3); /* Sombra dourada no foco */
    }

    .send-btn {
      background-color: var(--color-gold);
      border: none;
      color: var(--color-white);
      border-radius: 50%; /* Botão redondo */
      width: 48px; /* Tamanho fixo */
      height: 48px;
      font-size: 1.2rem; /* Tamanho do ícone */
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.2s ease, transform 0.1s ease;
      flex-shrink: 0; /* Não encolher */
    }
    .send-btn:hover {
      background-color: #c7951e; /* Dourado um pouco mais escuro no hover */
    }
     .send-btn:active {
        transform: scale(0.95); /* Efeito de clique */
     }

  </style>
</head>
<body>
  <div class="chat-container">
    <header class="chat-header">
      <div class="chat-title">
        <div class="chat-avatar"><i class="fas fa-robot"></i></div>
        <span>Assistente Virtual</span>
      </div>
      <div class="chat-actions">
        <button class="chat-action-btn" title="Ajuda"><i class="fas fa-question-circle"></i></button>
        <button class="chat-action-btn" title="Configurações"><i class="fas fa-cog"></i></button>
      </div>
    </header>

    <div class="chat-messages" id="chat-messages">
      </div>

    <div class="typing-indicator hidden" id="typing-indicator">
      <div class="typing-dot"></div>
      <div class="typing-dot"></div>
      <div class="typing-dot"></div>
      <span class="typing-text">Digitando...</span>
    </div>

    <div class="chat-input-container">
      <input type="text" id="message-input" class="message-input" placeholder="Digite sua mensagem..." autofocus>
      <button id="send-btn" class="send-btn" title="Enviar"><i class="fas fa-paper-plane"></i></button>
    </div>
  </div>

  <script>
    const chatMessages = document.getElementById('chat-messages');
    const inputField = document.getElementById('message-input');
    const sendBtn = document.getElementById('send-btn');
    const typingIndicator = document.getElementById('typing-indicator');
    // !! IMPORTANTE: Coloque a URL correta do seu webhook aqui !!
    const webhookUrl = 'https://n8n-webhooks-s1.staybuy.site/webhook/755e6ee0-036e-471d-bf25-4d6e2b584a1a';

    function scrollToBottom() {
      setTimeout(() => {
         // Use 'smooth' para uma rolagem mais suave
         chatMessages.scrollTo({ top: chatMessages.scrollHeight, behavior: 'smooth' });
      }, 50);
    }

    function addMessage(text, sender) {
      const messageEl = document.createElement('div');
      messageEl.className = `${sender}-message message`;

      const now = new Date();
      const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

      const textEl = document.createElement('p');
      // Tratamento básico para links (opcional)
      const urlRegex = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
      textEl.innerHTML = text.replace(urlRegex, function(url) {
          return `<a href="${url}" target="_blank" style="color: var(--color-gold); text-decoration: underline;">${url}</a>`;
      });
      // Se não quiser links automáticos, use: textEl.textContent = text;
      messageEl.appendChild(textEl);


      const timeEl = document.createElement('span');
      timeEl.className = 'message-time';
      timeEl.textContent = timeString;
      messageEl.appendChild(timeEl);

      chatMessages.appendChild(messageEl);
      scrollToBottom();
    }

     function addWelcomeMessage() {
        const welcomeContainer = document.createElement('div');
        // Usa a classe 'bot-message' para herdar o estilo base, mas adiciona 'welcome-message' para estilos específicos se necessário
        welcomeContainer.className = 'bot-message message welcome-message';

        const now = new Date();
        const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

        // Monta o HTML interno da mensagem de boas-vindas
        welcomeContainer.innerHTML = `
            <p><strong class="welcome-title">👋 Olá! Sou a Sara, sua assistente virtual.</strong></p>
            <p class="welcome-text">Como posso ajudar você hoje?</p>
            <div class="quick-replies">
              <div class="quick-reply" onclick="sendQuickReply('Quais são seus serviços?')">Serviços</div>
              <div class="quick-reply" onclick="sendQuickReply('Preciso de suporte')">Suporte</div>
              <div class="quick-reply" onclick="sendQuickReply('Como faço um pedido?')">Pedidos</div>
            </div>
            <span class="message-time">${timeString}</span>
        `;
        chatMessages.appendChild(welcomeContainer);
        scrollToBottom();
    }


    function showTyping(show) {
      // Controla a classe 'hidden' para mostrar/esconder o indicador
       typingIndicator.classList.toggle('hidden', !show);
      if (show) {
         scrollToBottom(); // Rola para baixo quando o typing aparece
      }
    }

    async function sendMessage() {
      const text = inputField.value.trim();
      if (!text) return;

      addMessage(text, 'user');
      inputField.value = '';
      inputField.focus(); // Mantém o foco no input

      // Remove quick replies se existirem
      const quickRepliesContainer = chatMessages.querySelector('.quick-replies');
       if (quickRepliesContainer) {
           // Remove o container dos botões para limpar a interface
           quickRepliesContainer.remove();
       }


      showTyping(true);

      try {
        const res = await fetch(webhookUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ mensagem: text })
        });

        // Esconde o "Digitando..." *antes* de processar a resposta para resposta mais rápida
        showTyping(false);

        if (!res.ok) {
            let errorBody = `Erro HTTP: ${res.status}`;
             try { const errorData = await res.json(); errorBody += ` - ${JSON.stringify(errorData)}`; }
             catch(e) { try { const errorText = await res.text(); errorBody += ` - ${errorText}`; } catch (e2) { /* Ignora */ } }
            throw new Error(errorBody);
        }

        const data = await res.json();

        // --- LÓGICA PARA EXTRAIR A RESPOSTA ---
        let replyText = null;

        if (data.resposta) { replyText = data.resposta; }
        else if (data.mensagem) { replyText = data.mensagem; }
        else if (data.text) { replyText = data.text; }
        else if (typeof data === 'object' && data !== null && !Array.isArray(data)) {
            const keys = Object.keys(data);
            if (keys.length > 0 && Array.isArray(data[keys[0]]) && data[keys[0]].length > 0 && typeof data[keys[0]][0] === 'object' && data[keys[0]][0] !== null && data[keys[0]][0].hasOwnProperty('output')) {
               replyText = data[keys[0]][0].output;
            }
            else if (keys.length === 1) { replyText = keys[0]; }
        }

        if (replyText === null || typeof replyText === 'object') {
            replyText = JSON.stringify(data);
            console.warn("Não foi possível extrair uma resposta simples em texto. Exibindo dados brutos:", data);
        }

        if (typeof replyText === 'string') {
             replyText = replyText.replace(/\\n$/, '').trim();
             // Decodifica entidades HTML
             const tempEl = document.createElement('textarea');
             tempEl.innerHTML = replyText;
             replyText = tempEl.value;
        }
        // --- FIM DA LÓGICA DE EXTRAÇÃO ---

        // Adiciona um pequeno delay antes de mostrar a resposta do bot para parecer mais natural
        setTimeout(() => {
             addMessage(replyText, 'bot');
        }, 300); // Delay de 300ms


      } catch (err) {
        console.error('Erro ao enviar/processar mensagem:', err);
        showTyping(false); // Garante que esconde o typing em caso de erro
        // Adiciona a mensagem de erro com um pequeno delay também
         setTimeout(() => {
            addMessage(`Desculpe, ocorreu um erro ao conectar. Tente novamente mais tarde.`, 'bot');
            // addMessage(`Erro: ${err.message}.`, 'bot'); // Versão mais técnica do erro
        }, 300);
      }
    }

    // Função para lidar com cliques nos quick replies (exposta globalmente)
    window.sendQuickReply = function(text) {
      addMessage(text, 'user'); // Mostra a escolha do usuário como mensagem
       // Remove os quick replies após o clique
       const quickRepliesContainer = chatMessages.querySelector('.quick-replies');
       if (quickRepliesContainer) {
           quickRepliesContainer.remove();
       }
      inputField.value = ''; // Limpa o input por segurança

      showTyping(true); // Mostra "digitando" enquanto processa a escolha

       // Simula o envio da escolha para o backend (como se o usuário tivesse digitado)
       // Reutiliza a lógica de envio, mas com o texto do botão
        pretendToSend(text);

    }

    // Função auxiliar para simular envio (usada pelo quick reply)
    async function pretendToSend(text) {
         // Copia a lógica de fetch e processamento de sendMessage
          try {
            const res = await fetch(webhookUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ mensagem: text }) // Envia o texto do botão
            });

            showTyping(false);

            if (!res.ok) { /* ... tratamento de erro ... */ throw new Error(`Erro HTTP: ${res.status}`);}

            const data = await res.json();
            // --- LÓGICA PARA EXTRAIR A RESPOSTA (igual a sendMessage) ---
             let replyText = null;
             if (data.resposta) { replyText = data.resposta; }
             else if (data.mensagem) { replyText = data.mensagem; }
             else if (data.text) { replyText = data.text; }
             else if (typeof data === 'object' && data !== null && !Array.isArray(data)) { /* ... extração ... */ const keys = Object.keys(data); if (keys.length > 0 && Array.isArray(data[keys[0]]) && data[keys[0]].length > 0 && typeof data[keys[0]][0] === 'object' && data[keys[0]][0] !== null && data[keys[0]][0].hasOwnProperty('output')) { replyText = data[keys[0]][0].output; } else if (keys.length === 1) { replyText = keys[0]; }}
             if (replyText === null || typeof replyText === 'object') { replyText = JSON.stringify(data); /* ... console.warn ... */ }
             if (typeof replyText === 'string') { replyText = replyText.replace(/\\n$/, '').trim(); const tempEl = document.createElement('textarea'); tempEl.innerHTML = replyText; replyText = tempEl.value; }
             // --- FIM DA LÓGICA DE EXTRAÇÃO ---

            setTimeout(() => { addMessage(replyText, 'bot'); }, 300);

          } catch (err) {
              console.error('Erro ao enviar quick reply:', err);
              showTyping(false);
              setTimeout(() => { addMessage(`Desculpe, ocorreu um erro ao processar sua escolha.`, 'bot'); }, 300);
          }
    }


    // Event Listeners
    sendBtn.addEventListener('click', sendMessage);
    inputField.addEventListener('keydown', function(event) {
      if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendMessage();
      }
    });

    // Adiciona a mensagem de boas-vindas quando o DOM estiver pronto
    document.addEventListener("DOMContentLoaded", function () {
       // Atraso pequeno para exibir a mensagem de boas vindas
       setTimeout(() => {
           addWelcomeMessage();
           inputField.focus();
       }, 500); // Atraso de 500ms
    });

  </script>
</body>
</html>
